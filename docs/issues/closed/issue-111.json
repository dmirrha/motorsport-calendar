{"assignees":[],"author":{"id":"U_kgDODVxz5Q","is_bot":false,"login":"dmirrha","name":"Daniel Mirrha Santos"},"body":"# Implementar retry por fonte no DataCollector (flag retry_failed_sources sem efeito)\n\nA flag `retry_failed_sources` é carregada em `src/data_collector.py` (no `__init__` e em `_load_config()`), porém não há implementação de tentativas adicionais por fonte. Isso impede reprocessamento de falhas transitórias (ex.: timeouts intermitentes) conforme a intenção.\n\n## Contexto\n- A flag é atribuída, mas não utilizada nos fluxos de coleta (`_collect_sequential()`, `_collect_concurrent()` ou `_collect_from_source()`).\n- Estatísticas contabilizam falhas/sucessos, porém não há retry.\n\n## Proposta\n- Tornar o retry configurável: `retry_failed_sources` (bool), `max_retries` (int), `retry_backoff_seconds` (float).\n- Aplicar retry por fonte para exceções transitórias (TimeoutError, I/O), com contabilização/ logging por tentativa.\n- Padrão conservador (ex.: desabilitado ou `max_retries=1`).\n\n## Critérios de Aceite\n- Retry por fonte funcional e configurável.\n- Testes determinísticos (sucesso após retry; falha após esgotar retries).\n- Documentação e exemplos de config atualizados.\n\n## Referências\n- Código: `src/data_collector.py`\n- Tests: `tests/unit/data_collector/test_data_collector_basic.py`, `tests/unit/data_collector/test_data_collector_more.py`\n","createdAt":"2025-08-16T14:38:15Z","labels":[{"color":"a2eeef","description":"New feature or request","id":"LA_kwDOPWyu9M8AAAACGvJbfg","name":"enhancement"},{"color":"ededed","description":"","id":"LA_kwDOPWyu9M8AAAACH6HBXg","name":"collector"},{"color":"ededed","description":"","id":"LA_kwDOPWyu9M8AAAACH6HBXw","name":"tech-debt"}],"number":111,"state":"CLOSED","title":"Implementar retry por fonte no DataCollector (flag retry_failed_sources sem efeito)","updatedAt":"2025-08-20T01:19:14Z","url":"https://github.com/dmirrha/motorsport-calendar/issues/111"}
