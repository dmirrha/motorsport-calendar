{
  "number": 159,
  "state": "OPEN",
  "title": "F2 (opcional): Regras simples de detecção de anomalias",
  "url": "https://github.com/dmirrha/motorsport-calendar/issues/159",
  "created_at": "2025-08-26T16:56:22Z",
  "updated_at": "2025-08-26T17:09:11Z",
  "author": {
    "login": "dmirrha",
    "name": "Daniel Mirrha Santos"
  },
  "labels": [
    "enhancement",
    "needs-triage",
    "ai",
    "optional",
    "priority: P3"
  ],
  "assignees": [],
  "milestone": null,
  "body": "# F2 (opcional): Regras simples de detecção de anomalias\n\n## 📝 Descrição\nImplementar checagens leves de qualidade para sinalizar anomalias (datas fora do fim de semana alvo, horários improváveis, inconsistências de local/categoria), sem bloquear o pipeline.\n\n## 🔍 Contexto\n- Reportar anomalias agregadas ao final do processamento.\n- Integrar com `EventProcessor` ou módulo auxiliar.\n\n## 🎯 Comportamento Esperado\n- Geração de um relatório de warnings com contagens e exemplos.\n- Sem alterar o fluxo principal (apenas sinalização/log).\n\n## 🛠️ Passos\n1. Definir regras e severidades (warning/info).\n2. Implementar coleta e agregação dos casos.\n3. Expor resumo no log/UI.\n4. Testes com cenários sintéticos.\n\n## 📋 Critérios de Aceitação\n- [ ] Regras documentadas e configuráveis se aplicável.\n- [ ] Testes cobrindo casos positivos/negativos.\n- [ ] Sem impacto na geração quando desativado.\n\n## 📊 Impacto\nBaixo/Médio — melhora a confiabilidade percebida.\n\n## 🔗 Relacionamento\n- EPIC: #157\n\n## 🔗 Referências\n- `src/event_processor.py`\n- `docs/architecture/ai_implementation_plan.md`\n"
}
