<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="17" skipped="7" tests="61" time="5.388" timestamp="2025-08-05T19:49:04.051960+00:00" hostname="pkrvmjbmru5nbw0"><testcase classname="tests.regression.test_collection.test_tomada_tempo.TestTomadaTempoSource" name="test_collect_events_success" time="0.889"><failure message="assert 0 &gt; 0&#10; +  where 0 = len([])">tests/regression/test_collection/test_tomada_tempo.py:38: in test_collect_events_success
    assert len(events) &gt; 0
E   assert 0 &gt; 0
E    +  where 0 = len([])</failure></testcase><testcase classname="tests.regression.test_collection.test_tomada_tempo.TestTomadaTempoSource" name="test_collect_events_http_error" time="0.633"><failure message="Failed: DID NOT RAISE &lt;class 'Exception'&gt;">tests/regression/test_collection/test_tomada_tempo.py:48: in test_collect_events_http_error
    with pytest.raises(Exception):
E   Failed: DID NOT RAISE &lt;class 'Exception'&gt;</failure></testcase><testcase classname="tests.regression.test_collection.test_tomada_tempo.TestTomadaTempoSource" name="test_parse_event_date" time="0.002"><failure message="AssertionError: Failed to parse: 14:00&#10;assert datetime.datetime(2025, 1, 1, 14, 0) == None">tests/regression/test_collection/test_tomada_tempo.py:66: in test_parse_event_date
    assert result == expected, f"Failed to parse: {date_str}"
E   AssertionError: Failed to parse: 14:00
E   assert datetime.datetime(2025, 1, 1, 14, 0) == None</failure></testcase><testcase classname="tests.regression.test_collection.test_tomada_tempo.TestTomadaTempoSource" name="test_extract_event_info" time="0.021" /><testcase classname="tests.regression.test_collection.test_tomada_tempo.TestTomadaTempoSource" name="test_retry_mechanism" time="1.508" /><testcase classname="tests.regression.test_config_validation.TestConfigValidation" name="test_config_file_exists" time="0.001" /><testcase classname="tests.regression.test_config_validation.TestConfigValidation" name="test_config_is_valid_json" time="0.001" /><testcase classname="tests.regression.test_config_validation.TestConfigValidation" name="test_required_config_sections" time="0.001" /><testcase classname="tests.regression.test_config_validation.TestConfigValidation" name="test_logging_config" time="0.001" /><testcase classname="tests.regression.test_config_validation.TestConfigValidation" name="test_sources_config" time="0.001" /><testcase classname="tests.regression.test_event_collection_flow.TestEventCollectionFlow" name="test_event_collection_process" time="0.001"><failure message="ImportError: cannot import name 'MotorsportCalendar' from 'motorsport_calendar' (/home/runner/work/motorsport-calendar/motorsport-calendar/tests/../src/motorsport_calendar/__init__.py)">tests/regression/test_event_collection_flow.py:51: in test_event_collection_process
    from motorsport_calendar import MotorsportCalendar
E   ImportError: cannot import name 'MotorsportCalendar' from 'motorsport_calendar' (/home/runner/work/motorsport-calendar/motorsport-calendar/tests/../src/motorsport_calendar/__init__.py)</failure></testcase><testcase classname="tests.regression.test_event_collection_flow.TestEventCollectionFlow" name="test_event_filtering_by_date_range[1]" time="0.001"><failure message="ImportError: cannot import name 'MotorsportCalendar' from 'motorsport_calendar' (/home/runner/work/motorsport-calendar/motorsport-calendar/tests/../src/motorsport_calendar/__init__.py)">tests/regression/test_event_collection_flow.py:136: in test_event_filtering_by_date_range
    from motorsport_calendar import MotorsportCalendar
E   ImportError: cannot import name 'MotorsportCalendar' from 'motorsport_calendar' (/home/runner/work/motorsport-calendar/motorsport-calendar/tests/../src/motorsport_calendar/__init__.py)</failure></testcase><testcase classname="tests.regression.test_event_collection_flow.TestEventCollectionFlow" name="test_event_filtering_by_date_range[7]" time="0.001"><failure message="ImportError: cannot import name 'MotorsportCalendar' from 'motorsport_calendar' (/home/runner/work/motorsport-calendar/motorsport-calendar/tests/../src/motorsport_calendar/__init__.py)">tests/regression/test_event_collection_flow.py:136: in test_event_filtering_by_date_range
    from motorsport_calendar import MotorsportCalendar
E   ImportError: cannot import name 'MotorsportCalendar' from 'motorsport_calendar' (/home/runner/work/motorsport-calendar/motorsport-calendar/tests/../src/motorsport_calendar/__init__.py)</failure></testcase><testcase classname="tests.regression.test_event_collection_flow.TestEventCollectionFlow" name="test_event_filtering_by_date_range[30]" time="0.002"><failure message="ImportError: cannot import name 'MotorsportCalendar' from 'motorsport_calendar' (/home/runner/work/motorsport-calendar/motorsport-calendar/tests/../src/motorsport_calendar/__init__.py)">tests/regression/test_event_collection_flow.py:136: in test_event_filtering_by_date_range
    from motorsport_calendar import MotorsportCalendar
E   ImportError: cannot import name 'MotorsportCalendar' from 'motorsport_calendar' (/home/runner/work/motorsport-calendar/motorsport-calendar/tests/../src/motorsport_calendar/__init__.py)</failure></testcase><testcase classname="tests.regression.test_files.test_file_manager.TestFileManager" name="test_ensure_directories" time="0.000"><skipped type="pytest.xfail" message="FileManager implementation pending" /></testcase><testcase classname="tests.regression.test_files.test_file_manager.TestFileManager" name="test_cleanup_old_files" time="0.000"><skipped type="pytest.xfail" message="FileManager implementation pending" /></testcase><testcase classname="tests.regression.test_files.test_file_manager.TestFileManager" name="test_rotate_logs" time="0.000"><skipped type="pytest.xfail" message="FileManager implementation pending" /></testcase><testcase classname="tests.regression.test_files.test_file_manager.TestFileManager" name="test_save_payload" time="0.001"><skipped type="pytest.xfail" message="FileManager implementation pending" /></testcase><testcase classname="tests.regression.test_files.test_file_manager.TestFileManager" name="test_cleanup_payloads" time="0.000"><skipped type="pytest.xfail" message="FileManager implementation pending" /></testcase><testcase classname="tests.regression.test_files.test_file_manager.TestFileManager" name="test_save_and_load_events" time="0.000"><skipped type="pytest.xfail" message="FileManager implementation pending" /></testcase><testcase classname="tests.regression.test_files.test_file_manager.TestFileManager" name="test_handle_file_errors" time="0.001"><skipped type="pytest.xfail" message="FileManager implementation pending" /></testcase><testcase classname="tests.regression.test_ical.test_ical_generator.TestICalGenerator" name="test_generate_ical" time="0.083"><failure message="AssertionError: Expected 2 events, found 0&#10;assert 0 == 2&#10; +  where 0 = len([])&#10; +  and   2 = len([{'title': 'F1 GP do Brasil - Treino Livre 1', 'start_time': '2025-11-15T10:30:00-03:00', 'end_time': '2025-11-15T11:30:00-03:00', 'category': 'formula1', 'circuit': 'Aut\xf3dromo de Interlagos', 'location': 'S\xe3o Paulo, Brasil', 'description': 'Primeiro treino livre do GP do Brasil de F\xf3rmula 1', 'streaming_links': ['https://example.com/stream1'], 'metadata': {'series': 'F\xf3rmula 1', 'session_type': 'practice', 'round': 21, 'season': 2025}}, {'title': 'F1 GP do Brasil - Corrida', 'start_time': '2025-11-16T14:00:00-03:00', 'end_time': '2025-11-16T16:00:00-03:00', 'category': 'formula1', 'circuit': 'Aut\xf3dromo de Interlagos', 'location': 'S\xe3o Paulo, Brasil', 'description': 'Corrida do GP do Brasil de F\xf3rmula 1', 'streaming_links': ['https://example.com/stream1'], 'metadata': {'series': 'F\xf3rmula 1', 'session_type': 'race', 'round': 21, 'season': 2025, 'laps': 71, 'distance': '305.909 km'}}])">tests/regression/test_ical/test_ical_generator.py:139: in test_generate_ical
    assert len(events) == len(sample_events), \
E   AssertionError: Expected 2 events, found 0
E   assert 0 == 2
E    +  where 0 = len([])
E    +  and   2 = len([{'title': 'F1 GP do Brasil - Treino Livre 1', 'start_time': '2025-11-15T10:30:00-03:00', 'end_time': '2025-11-15T11:30:00-03:00', 'category': 'formula1', 'circuit': 'Aut\xf3dromo de Interlagos', 'location': 'S\xe3o Paulo, Brasil', 'description': 'Primeiro treino livre do GP do Brasil de F\xf3rmula 1', 'streaming_links': ['https://example.com/stream1'], 'metadata': {'series': 'F\xf3rmula 1', 'session_type': 'practice', 'round': 21, 'season': 2025}}, {'title': 'F1 GP do Brasil - Corrida', 'start_time': '2025-11-16T14:00:00-03:00', 'end_time': '2025-11-16T16:00:00-03:00', 'category': 'formula1', 'circuit': 'Aut\xf3dromo de Interlagos', 'location': 'S\xe3o Paulo, Brasil', 'description': 'Corrida do GP do Brasil de F\xf3rmula 1', 'streaming_links': ['https://example.com/stream1'], 'metadata': {'series': 'F\xf3rmula 1', 'session_type': 'race', 'round': 21, 'season': 2025, 'laps': 71, 'distance': '305.909 km'}}])</failure></testcase><testcase classname="tests.regression.test_ical.test_ical_generator.TestICalGenerator" name="test_event_timezone_handling" time="0.068"><failure message="IndexError: list index out of range">tests/regression/test_ical/test_ical_generator.py:176: in test_event_timezone_handling
    event = [comp for comp in cal.walk() if comp.name == 'VEVENT'][0]
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   IndexError: list index out of range</failure></testcase><testcase classname="tests.regression.test_ical.test_ical_generator.TestICalGenerator" name="test_reminders" time="0.094"><failure message="IndexError: list index out of range">tests/regression/test_ical/test_ical_generator.py:191: in test_reminders
    event = [comp for comp in cal.walk() if comp.name == 'VEVENT'][0]
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   IndexError: list index out of range</failure></testcase><testcase classname="tests.regression.test_ical.test_ical_generator.TestICalGenerator" name="test_empty_events" time="0.011" /><testcase classname="tests.regression.test_ical_generation.TestICalGeneration" name="test_ical_file_generation" time="0.001"><failure message="ImportError: cannot import name 'MotorsportCalendar' from 'motorsport_calendar' (/home/runner/work/motorsport-calendar/motorsport-calendar/tests/../src/motorsport_calendar/__init__.py)">tests/regression/test_ical_generation.py:49: in test_ical_file_generation
    from motorsport_calendar import MotorsportCalendar
E   ImportError: cannot import name 'MotorsportCalendar' from 'motorsport_calendar' (/home/runner/work/motorsport-calendar/motorsport-calendar/tests/../src/motorsport_calendar/__init__.py)</failure></testcase><testcase classname="tests.regression.test_ical_generation.TestICalGeneration" name="test_ical_generation_with_missing_fields" time="0.001"><failure message="ModuleNotFoundError: No module named 'utils.ical_generator'">tests/regression/test_ical_generation.py:122: in test_ical_generation_with_missing_fields
    from utils.ical_generator import generate_ical
E   ModuleNotFoundError: No module named 'utils.ical_generator'</failure></testcase><testcase classname="tests.regression.test_ical_generation.TestICalGeneration" name="test_ical_generation_with_recurring_events" time="0.001"><failure message="ModuleNotFoundError: No module named 'utils.ical_generator'">tests/regression/test_ical_generation.py:154: in test_ical_generation_with_recurring_events
    from utils.ical_generator import generate_ical
E   ModuleNotFoundError: No module named 'utils.ical_generator'</failure></testcase><testcase classname="tests.regression.test_processing.test_event_processor.TestEventProcessor" name="test_filter_events_by_category" time="0.002" /><testcase classname="tests.regression.test_processing.test_event_processor.TestEventProcessor" name="test_filter_weekend_events" time="0.129"><failure message="AssertionError: assert 4 == 3&#10; +  where 4 = len([{'title': 'F1 GP do Brasil - Treino Livre 1', 'start_time': '2025-11-15T10:30:00-03:00', 'end_time': '2025-11-15T11:30:00-03:00', 'category': 'formula1', 'circuit': 'Aut\xf3dromo de Interlagos', 'location': 'S\xe3o Paulo, Brasil', 'metadata': {'session_type': 'practice'}}, {'title': 'F1 GP do Brasil - Qualifica\xe7\xe3o', 'start_time': '2025-11-15T14:00:00-03:00', 'end_time': '2025-11-15T15:00:00-03:00', 'category': 'formula1', 'circuit': 'Aut\xf3dromo de Interlagos', 'location': 'S\xe3o Paulo, Brasil', 'metadata': {'session_type': 'qualifying'}}, {'title': 'F1 GP do Brasil - Corrida', 'start_time': '2025-11-16T14:00:00-03:00', 'end_time': '2025-11-16T16:00:00-03:00', 'category': 'formula1', 'circuit': 'Aut\xf3dromo de Interlagos', 'location': 'S\xe3o Paulo, Brasil', 'metadata': {'session_type': 'race'}}, {'title': 'F1 GP de Abu Dhabi - Treino Livre 1', 'start_time': '2025-12-05T10:30:00+04:00', 'end_time': '2025-12-05T11:30:00+04:00', 'category': 'formula1', 'metadata': {'session_type': 'practice'}}])">tests/regression/test_processing/test_event_processor.py:80: in test_filter_weekend_events
    assert len(filtered) == 3  # Should only include Brazil weekend events
    ^^^^^^^^^^^^^^^^^^^^^^^^^
E   AssertionError: assert 4 == 3
E    +  where 4 = len([{'title': 'F1 GP do Brasil - Treino Livre 1', 'start_time': '2025-11-15T10:30:00-03:00', 'end_time': '2025-11-15T11:30:00-03:00', 'category': 'formula1', 'circuit': 'Aut\xf3dromo de Interlagos', 'location': 'S\xe3o Paulo, Brasil', 'metadata': {'session_type': 'practice'}}, {'title': 'F1 GP do Brasil - Qualifica\xe7\xe3o', 'start_time': '2025-11-15T14:00:00-03:00', 'end_time': '2025-11-15T15:00:00-03:00', 'category': 'formula1', 'circuit': 'Aut\xf3dromo de Interlagos', 'location': 'S\xe3o Paulo, Brasil', 'metadata': {'session_type': 'qualifying'}}, {'title': 'F1 GP do Brasil - Corrida', 'start_time': '2025-11-16T14:00:00-03:00', 'end_time': '2025-11-16T16:00:00-03:00', 'category': 'formula1', 'circuit': 'Aut\xf3dromo de Interlagos', 'location': 'S\xe3o Paulo, Brasil', 'metadata': {'session_type': 'race'}}, {'title': 'F1 GP de Abu Dhabi - Treino Livre 1', 'start_time': '2025-12-05T10:30:00+04:00', 'end_time': '2025-12-05T11:30:00+04:00', 'category': 'formula1', 'metadata': {'session_type': 'practice'}}])</failure></testcase><testcase classname="tests.regression.test_processing.test_event_processor.TestEventProcessor" name="test_apply_timezone" time="0.002"><failure message="AttributeError: 'datetime.datetime' object has no attribute 'endswith'">tests/regression/test_processing/test_event_processor.py:88: in test_apply_timezone
    assert converted[0]["start_time"].endswith("13:30:00+00:00")  # 10:30-03:00 -&gt; 13:30Z
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'datetime.datetime' object has no attribute 'endswith'</failure></testcase><testcase classname="tests.regression.test_processing.test_event_processor.TestEventProcessor" name="test_detect_duplicates" time="0.002"><failure message="AssertionError: assert 1 == 3&#10; +  where 1 = len([{'title': 'F1 GP do Brasil - Treino Livre 1', 'start_time': '2025-11-15T10:30:00-03:00', 'end_time': '2025-11-15T11:30:00-03:00', 'category': 'formula1', 'circuit': 'Aut\xf3dromo de Interlagos', 'location': 'S\xe3o Paulo, Brasil', 'metadata': {'session_type': 'practice'}, 'streaming_links': []}])&#10; +  and   3 = len([{'title': 'F1 GP do Brasil - Treino Livre 1', 'start_time': '2025-11-15T10:30:00-03:00', 'end_time': '2025-11-15T11:30:00-03:00', 'category': 'formula1', 'circuit': 'Aut\xf3dromo de Interlagos', 'location': 'S\xe3o Paulo, Brasil', 'metadata': {'session_type': 'practice'}, 'streaming_links': []}, {'title': 'F1 GP do Brasil - Qualifica\xe7\xe3o', 'start_time': '2025-11-15T14:00:00-03:00', 'end_time': '2025-11-15T15:00:00-03:00', 'category': 'formula1', 'circuit': 'Aut\xf3dromo de Interlagos', 'location': 'S\xe3o Paulo, Brasil', 'metadata': {'session_type': 'qualifying'}}, {'title': 'F1 GP do Brasil - Corrida', 'start_time': '2025-11-16T14:00:00-03:00', 'end_time': '2025-11-16T16:00:00-03:00', 'category': 'formula1', 'circuit': 'Aut\xf3dromo de Interlagos', 'location': 'S\xe3o Paulo, Brasil', 'metadata': {'session_type': 'race'}}])">tests/regression/test_processing/test_event_processor.py:101: in test_detect_duplicates
    assert len(deduplicated) == len(sample_events)
E   AssertionError: assert 1 == 3
E    +  where 1 = len([{'title': 'F1 GP do Brasil - Treino Livre 1', 'start_time': '2025-11-15T10:30:00-03:00', 'end_time': '2025-11-15T11:30:00-03:00', 'category': 'formula1', 'circuit': 'Aut\xf3dromo de Interlagos', 'location': 'S\xe3o Paulo, Brasil', 'metadata': {'session_type': 'practice'}, 'streaming_links': []}])
E    +  and   3 = len([{'title': 'F1 GP do Brasil - Treino Livre 1', 'start_time': '2025-11-15T10:30:00-03:00', 'end_time': '2025-11-15T11:30:00-03:00', 'category': 'formula1', 'circuit': 'Aut\xf3dromo de Interlagos', 'location': 'S\xe3o Paulo, Brasil', 'metadata': {'session_type': 'practice'}, 'streaming_links': []}, {'title': 'F1 GP do Brasil - Qualifica\xe7\xe3o', 'start_time': '2025-11-15T14:00:00-03:00', 'end_time': '2025-11-15T15:00:00-03:00', 'category': 'formula1', 'circuit': 'Aut\xf3dromo de Interlagos', 'location': 'S\xe3o Paulo, Brasil', 'metadata': {'session_type': 'qualifying'}}, {'title': 'F1 GP do Brasil - Corrida', 'start_time': '2025-11-16T14:00:00-03:00', 'end_time': '2025-11-16T16:00:00-03:00', 'category': 'formula1', 'circuit': 'Aut\xf3dromo de Interlagos', 'location': 'S\xe3o Paulo, Brasil', 'metadata': {'session_type': 'race'}}])</failure></testcase><testcase classname="tests.regression.test_processing.test_event_processor.TestEventProcessor" name="test_apply_silent_periods" time="0.002"><failure message="assert False&#10; +  where False = any(&lt;generator object TestEventProcessor.test_apply_silent_periods.&lt;locals&gt;.&lt;genexpr&gt; at 0x7fe3bb1817e0&gt;)">tests/regression/test_processing/test_event_processor.py:122: in test_apply_silent_periods
    assert any("silent_period" in e["metadata"] for e in race_events)
E   assert False
E    +  where False = any(&lt;generator object TestEventProcessor.test_apply_silent_periods.&lt;locals&gt;.&lt;genexpr&gt; at 0x7fe3bb1817e0&gt;)</failure></testcase><testcase classname="tests.test_silent_period.TestSilentPeriod" name="test_days_of_week_parsing" time="0.002" /><testcase classname="tests.test_silent_period.TestSilentPeriod" name="test_event_in_midnight_crossing_period" time="0.001" /><testcase classname="tests.test_silent_period.TestSilentPeriod" name="test_event_in_normal_period" time="0.001" /><testcase classname="tests.test_silent_period.TestSilentPeriod" name="test_get_description" time="0.001" /><testcase classname="tests.test_silent_period.TestSilentPeriod" name="test_silent_period_disabled" time="0.001" /><testcase classname="tests.test_silent_period.TestSilentPeriod" name="test_silent_period_initialization" time="0.001" /><testcase classname="tests.test_silent_period.TestSilentPeriod" name="test_time_parsing_invalid" time="0.001" /><testcase classname="tests.test_silent_period.TestSilentPeriod" name="test_time_parsing_valid" time="0.001" /><testcase classname="tests.test_silent_period.TestSilentPeriodManager" name="test_filter_events_no_datetime" time="0.002" /><testcase classname="tests.test_silent_period.TestSilentPeriodManager" name="test_filter_events_no_periods" time="0.001" /><testcase classname="tests.test_silent_period.TestSilentPeriodManager" name="test_filter_events_with_periods" time="0.002" /><testcase classname="tests.test_silent_period.TestSilentPeriodManager" name="test_get_active_periods" time="0.001" /><testcase classname="tests.test_silent_period.TestSilentPeriodManager" name="test_manager_initialization_no_config" time="0.001" /><testcase classname="tests.test_silent_period.TestSilentPeriodManager" name="test_manager_initialization_with_config" time="0.001" /><testcase classname="tests.test_silent_period.TestSilentPeriodManager" name="test_statistics" time="0.002" /><testcase classname="tests.unit.test_config_validator.TestConfigValidator" name="test_validate_logging_config_invalid_log_level" time="0.001" /><testcase classname="tests.unit.test_config_validator.TestConfigValidator" name="test_validate_logging_config_missing_required" time="0.001" /><testcase classname="tests.unit.test_config_validator.TestConfigValidator" name="test_validate_logging_config_permission_error" time="0.002" /><testcase classname="tests.unit.test_config_validator.TestConfigValidator" name="test_validate_logging_config_valid" time="0.001" /><testcase classname="tests.unit.test_config_validator.TestConfigValidator" name="test_validate_payload_settings_custom_values" time="0.001" /><testcase classname="tests.unit.test_config_validator.TestConfigValidator" name="test_validate_payload_settings_defaults" time="0.001" /><testcase classname="tests.unit.test_config_validator.TestConfigValidator" name="test_validate_payload_settings_invalid_numeric" time="0.001" /><testcase classname="tests.unit.test_config_validator.TestConfigValidator" name="test_validate_silent_periods_invalid_structure" time="0.001" /><testcase classname="tests.unit.test_config_validator.TestConfigValidator" name="test_validate_silent_periods_invalid_time_format" time="0.002" /><testcase classname="tests.unit.test_config_validator.TestConfigValidator" name="test_validate_silent_periods_invalid_weekday" time="0.001" /><testcase classname="tests.unit.test_config_validator.TestConfigValidator" name="test_validate_silent_periods_missing_required_field" time="0.002" /><testcase classname="tests.unit.test_config_validator.TestConfigValidator" name="test_validate_silent_periods_no_weekdays" time="0.002" /><testcase classname="tests.unit.test_config_validator.TestConfigValidator" name="test_validate_silent_periods_valid" time="0.002" /></testsuite></testsuites>