name: Regression Tests

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      log-level:
        description: 'Log level (debug, info, warning, error, critical)'
        required: false
        default: 'info'

jobs:
  test:
    name: Run Regression Tests
    runs-on: ubuntu-latest
    
    services:
      # Adicione aqui serviços adicionais necessários para os testes
      # Por exemplo, um banco de dados em memória
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Create test directories
      run: |
        mkdir -p test_results
        mkdir -p logs
        mkdir -p output

    - name: Install test dependencies
      run: |
        pip install -r requirements-dev.txt
        pip install pytest-cov pytest-html

    - name: Run tests with coverage
      run: |
        mkdir -p test_results
        python -m pytest tests/regression/ \
          --cov=src \
          --cov-report=xml:coverage.xml \
          --cov-report=term \
          --junitxml=test_results/junit.xml \
          --html=test_results/report.html \
          -v
      env:
        PYTHONPATH: ${{ github.workspace }}
        TEST_ENV: github

    - name: Upload coverage to Codecov
      if: always()
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: true
        verbose: true

    - name: Verify test artifacts
      if: always()
      run: |
        echo "Verificando arquivos gerados..."
        ls -la test_results/ || true
        [ -f coverage.xml ] || echo "##[warning]Arquivo coverage.xml não encontrado"
        [ -f test_results/junit.xml ] || echo "##[warning]Arquivo junit.xml não encontrado"

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          test_results/
          coverage.xml
        retention-days: 7

    - name: Check test results
      if: always()
      run: |
        # Verifica se houve falhas nos testes
        if [ -f test_results/junit.xml ]; then
          if grep -q 'failures="[1-9]' test_results/junit.xml; then
            echo "::error::Alguns testes falharam. Verifique os logs para mais detalhes."
            exit 1
          fi
        else
          echo "::error::Arquivo de resultados de teste não encontrado."
          exit 1
        fi
