name: Tests

on:
  push:
    branches: [ main, chore/**, feat/**, fix/** ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install pytest pytest-cov

      - name: Run tests
        env:
          TZ: America/Sao_Paulo
        run: |
          mkdir -p test_results
          pytest \
            -m "not integration" \
            -k "not test_phase2_e2e_" \
            --cov-config=.coveragerc \
            --cov=src --cov=sources \
            --cov-report=term-missing:skip-covered \
            --cov-report=xml:coverage.xml \
            --cov-report=html \
            --junitxml=test_results/junit.xml \
            -o junit_family=legacy

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            test_results/junit.xml
            coverage.xml
            htmlcov/

      - name: Upload test results to Codecov (unit)
        if: always()
        uses: codecov/test-results-action@v1
        with:
          files: test_results/junit.xml
          flags: unit
          use_oidc: true
          disable_search: true
          fail_ci_if_error: false
          verbose: true

      - name: Verify coverage file (unit)
        if: always()
        run: |
          echo "Verificando coverage.xml"
          ls -l coverage.xml || true
          wc -c coverage.xml || true
          head -n 5 coverage.xml || true

      - name: Upload coverage to Codecov (unit) [try 1]
        id: codecov_unit_try1
        if: always()
        continue-on-error: true
        uses: codecov/codecov-action@v4
        with:
          files: ${{ github.workspace }}/coverage.xml
          flags: unit
          disable_search: true
          fail_ci_if_error: true
          verbose: true
          use_oidc: true

      - name: Upload coverage to Codecov (unit) [retry if failed]
        if: ${{ always() && steps.codecov_unit_try1.outcome == 'failure' }}
        uses: codecov/codecov-action@v4
        with:
          files: ${{ github.workspace }}/coverage.xml
          flags: unit
          disable_search: true
          fail_ci_if_error: true
          verbose: true
          use_oidc: true

      - name: Upload coverage to Codecov (unit) [retry if failed]
        if: ${{ always() && steps.codecov_unit_try1.outcome == 'failure' }}
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          flags: unit
          disable_search: true
          fail_ci_if_error: false
          verbose: true
          use_oidc: true

  e2e_happy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install pytest pytest-cov

      - name: Run all E2E with coverage (no gate)
        env:
          TZ: America/Sao_Paulo
        run: |
          mkdir -p test_results_e2e
          pytest -q \
            --cov-config=.coveragerc \
            tests/integration/test_phase2_e2e_*.py \
            --cov=src/data_collector.py \
            --cov=src/event_processor.py \
            --cov=src/ical_generator.py \
            --cov=sources/tomada_tempo.py \
            --cov-report=term-missing:skip-covered \
            --cov-report=xml:coverage_e2e.xml \
            --cov-report=html:htmlcov-e2e \
            --cov-fail-under=0 \
            --junitxml=test_results_e2e/junit.xml \
            -o junit_family=legacy

      - name: Upload E2E artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-happy-artifacts
          path: |
            test_results_e2e/junit.xml
            coverage_e2e.xml
            htmlcov-e2e/

      - name: Upload test results to Codecov (e2e)
        if: always()
        uses: codecov/test-results-action@v1
        with:
          files: test_results_e2e/junit.xml
          flags: e2e
          use_oidc: true
          disable_search: true
          fail_ci_if_error: false
          verbose: true
      
      - name: Verify coverage file (e2e)
        if: always()
        run: |
          echo "Verificando coverage_e2e.xml"
          ls -l coverage_e2e.xml || true
          wc -c coverage_e2e.xml || true
          head -n 5 coverage_e2e.xml || true

      - name: Generate coverage XML if missing (e2e)
        if: always()
        run: |
          if [ ! -f coverage_e2e.xml ]; then
            echo "coverage_e2e.xml não encontrado. Gerando via 'coverage xml'..."
            python -m coverage xml -i -o coverage_e2e.xml || true
          fi
          echo "Após fallback:"
          ls -l coverage_e2e.xml || true

      - name: Upload coverage to Codecov (e2e) [try 1]
        id: codecov_e2e_try1
        if: always()
        continue-on-error: true
        uses: codecov/codecov-action@v4
        with:
          files: ${{ github.workspace }}/coverage_e2e.xml
          flags: e2e
          disable_search: true
          fail_ci_if_error: true
          verbose: true
          use_oidc: true

      - name: Upload coverage to Codecov (e2e) [retry if failed]
        if: ${{ always() && steps.codecov_e2e_try1.outcome == 'failure' }}
        uses: codecov/codecov-action@v4
        with:
          files: ${{ github.workspace }}/coverage_e2e.xml
          flags: e2e
          disable_search: true
          fail_ci_if_error: true
          verbose: true
          use_oidc: true

      - name: Upload coverage to Codecov (e2e) [retry if failed]
        if: ${{ always() && steps.codecov_e2e_try1.outcome == 'failure' }}
        uses: codecov/codecov-action@v4
        with:
          files: coverage_e2e.xml
          flags: e2e
          disable_search: true
          fail_ci_if_error: false
          verbose: true
          use_oidc: true
      
  integration:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install pytest pytest-cov

      - name: Run integration tests with coverage (no gate)
        env:
          TZ: America/Sao_Paulo
        run: |
          mkdir -p test_results_integration
          pytest -q -m integration \
            --cov-config=.coveragerc \
            --cov=src/config_manager.py \
            --cov=src/silent_period.py \
            --cov=src/category_detector.py \
            --cov=src/ical_generator.py \
            --cov=src/event_processor.py \
            --cov=src/data_collector.py \
            --cov=sources/base_source.py \
            --cov=sources/tomada_tempo.py \
            --cov-report=term-missing:skip-covered \
            --cov-report=xml:coverage_integration.xml \
            --cov-report=html:htmlcov-integration \
            --cov-fail-under=0 \
            --junitxml=test_results_integration/junit.xml \
            -o junit_family=legacy

      - name: Upload integration artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-artifacts
          path: |
            test_results_integration/junit.xml
            coverage_integration.xml
            htmlcov-integration/

      - name: Upload test results to Codecov (integration)
        if: always()
        uses: codecov/test-results-action@v1
        with:
          files: test_results_integration/junit.xml
          flags: integration
          use_oidc: true
          disable_search: true
          fail_ci_if_error: false
          verbose: true

      - name: Verify coverage file (integration)
        if: always()
        run: |
          echo "Verificando coverage_integration.xml"
          ls -l coverage_integration.xml || true
          wc -c coverage_integration.xml || true
          head -n 5 coverage_integration.xml || true

      - name: Generate coverage XML if missing (integration)
        if: always()
        run: |
          if [ ! -f coverage_integration.xml ]; then
            echo "coverage_integration.xml não encontrado. Gerando via 'coverage xml'..."
            python -m coverage xml -i -o coverage_integration.xml || true
          fi
          echo "Após fallback:"
          ls -l coverage_integration.xml || true

      - name: Upload coverage to Codecov (integration) [try 1]
        id: codecov_integration_try1
        if: always()
        continue-on-error: true
        uses: codecov/codecov-action@v4
        with:
          files: ${{ github.workspace }}/coverage_integration.xml
          flags: integration
          disable_search: true
          fail_ci_if_error: true
          verbose: true
          use_oidc: true

      - name: Upload coverage to Codecov (integration) [retry if failed]
        if: ${{ always() && steps.codecov_integration_try1.outcome == 'failure' }}
        uses: codecov/codecov-action@v4
        with:
          files: ${{ github.workspace }}/coverage_integration.xml
          flags: integration
          disable_search: true
          fail_ci_if_error: true
          verbose: true
          use_oidc: true

      - name: Upload coverage to Codecov (integration) [retry if failed]
        if: ${{ always() && steps.codecov_integration_try1.outcome == 'failure' }}
        uses: codecov/codecov-action@v4
        with:
          files: coverage_integration.xml
          flags: integration
          disable_search: true
          fail_ci_if_error: false
          verbose: true
          use_oidc: true

  post_pr_comment:
    name: Post PR comment (coverage and status)
    needs: [tests, integration, e2e_happy]
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: Download artifacts (all)
        if: always()
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          pattern: "*artifacts"
          merge-multiple: true
          path: artifacts

      - name: Generate comment body
        if: always()
        env:
          NEEDS_TESTS: ${{ needs.tests.result }}
          NEEDS_INTEGRATION: ${{ needs.integration.result }}
          NEEDS_E2E: ${{ needs.e2e_happy.result }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          echo "Ref name: ${GITHUB_REF_NAME}"
          python - <<'PY'
          import os, xml.etree.ElementTree as ET
          def cov(path):
              try:
                  tree = ET.parse(path); root = tree.getroot()
                  lr = float(root.attrib.get("line-rate", "0"))
                  br = float(root.attrib.get("branch-rate", "0"))
                  return round(lr*100, 2), round(br*100, 2)
              except Exception:
                  return None, None
          def junit_info(path):
              try:
                  tree = ET.parse(path); root = tree.getroot()
                  suites = [root] if root.tag == "testsuite" else root.findall(".//testsuite")
                  fails = []
                  total = failures = errors = 0
                  for s in suites:
                      total += int(s.attrib.get("tests", 0) or 0)
                      failures += int(s.attrib.get("failures", 0) or 0)
                      errors += int(s.attrib.get("errors", 0) or 0)
                      for f in s.findall("testcase/failure"):
                          msg = f.attrib.get("message", "").strip() or (f.text or "").strip()
                          if msg:
                              fails.append(msg)
                      for f in s.findall("testcase/error"):
                          msg = f.attrib.get("message", "").strip() or (f.text or "").strip()
                          if msg:
                              fails.append(msg)
                  first = fails[0][:300] if fails else ""
                  return {"total": total, "failures": failures, "errors": errors, "first_failure": first}
              except Exception:
                  return None
          unit_cov_lr, unit_cov_br = cov("artifacts/coverage.xml")
          int_cov_lr, int_cov_br = cov("artifacts/coverage_integration.xml")
          e2e_cov_lr, e2e_cov_br = cov("artifacts/coverage_e2e.xml")
          unit_j = junit_info("artifacts/test_results/junit.xml")
          int_j = junit_info("artifacts/test_results_integration/junit.xml")
          e2e_j = junit_info("artifacts/test_results_e2e/junit.xml")
          needs_tests = os.getenv("NEEDS_TESTS")
          needs_integration = os.getenv("NEEDS_INTEGRATION")
          needs_e2e = os.getenv("NEEDS_E2E")
          def fmt(v):
              return f"{v:.2f}%" if v is not None else "N/D"
          status_ok = all(x == "success" for x in (needs_tests, needs_integration, needs_e2e))
          status = "Aprovada" if status_ok else "Erro"
          err_msg = ""
          for label, res, info in (("Unit", needs_tests, unit_j), ("Integration", needs_integration, int_j), ("E2E", needs_e2e, e2e_j)):
              if res != "success":
                  if info and (info.get("failures") or info.get("errors")):
                      err_msg = f"{label}: {info.get('failures',0)} failures, {info.get('errors',0)} errors. {info.get('first_failure','')}".strip()
                  else:
                      err_msg = f"{label}: job falhou (sem detalhes de JUnit)."
                  break
          head_ref = os.getenv("GITHUB_HEAD_REF") or os.getenv("GITHUB_REF_NAME")
          sha = os.getenv("GITHUB_SHA", "")[:7]
          run_url = os.getenv("RUN_URL")
          lines = []
          lines.append("CI — Resultados desta execução")
          lines.append("")
          lines.append(f"- Branch testada: `{head_ref}` @ `{sha}`")
          lines.append(f"- Cobertura (line-rate):")
          lines.append(f"  - Unit: {fmt(unit_cov_lr)}")
          lines.append(f"  - Integration: {fmt(int_cov_lr)}")
          lines.append(f"  - E2E: {fmt(e2e_cov_lr)}")
          lines.append(f"- Status da validação: **{status}**")
          lines.append(f"  - Jobs: unit={needs_tests}, integration={needs_integration}, e2e={needs_e2e}")
          if status != "Aprovada" and err_msg:
              lines.append(f"  - Erro: {err_msg}")
          lines.append(f"- Run: {run_url}")
          with open("comment_body.txt", "w", encoding="utf-8") as f:
              f.write("\n".join(lines))
          print("\n".join(lines))
          PY

      - name: Detect PR number
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          if [ -n "${{ github.event.pull_request.number || '' }}" ]; then
            echo "${{ github.event.pull_request.number }}" > pr_number.txt
            exit 0
          fi
          head_ref="${{ github.head_ref || github.ref_name }}"
          pr=$(gh pr list -R "${{ github.repository }}" --state open --head "$head_ref" --json number --jq '.[0].number' || true)
          if [ -z "$pr" ]; then
            pr=$(gh pr list -R "${{ github.repository }}" --state all --search "${{ github.sha }}" --json number --jq '.[0].number' || true)
          fi
          if [ -z "$pr" ]; then
            echo "Nenhuma PR encontrada para esta execução." > pr_missing.txt
            exit 0
          fi
          echo "$pr" > pr_number.txt
          echo "PR=$pr"

      - name: Post comment to PR
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ ! -f pr_number.txt ]; then
            echo "PR não encontrada; comentário não será postado."
            exit 0
          fi
          pr=$(cat pr_number.txt)
          echo "Postando comentário na PR #$pr"
          gh api repos/${{ github.repository }}/issues/$pr/comments -F body=@comment_body.txt
